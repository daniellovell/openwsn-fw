<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\01bsp_radio.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\01bsp_radio.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jun 28 16:30:58 2022
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EXT_GPIO8_ACTIVEHIGH_Handler &rArr; ext_gpio8_activehigh_isr &rArr; optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[19]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">ADC_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[11]">EXT_GPIO10_ACTIVELOW</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[7]">EXT_GPIO3_ACTIVEHIGH_DEBOUNCED_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[f]">EXT_GPIO8_ACTIVEHIGH_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[10]">EXT_GPIO9_ACTIVELOW_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[8]">EXT_OPTICAL_IRQ_IN_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[e]">OPTICAL_SFD_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[d]">RAWCHIPS_32_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[c]">RAWCHIPS_STARTVAL_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[b]">RFTIMER_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[a]">RF_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[17]">Reset_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[6]">UART_Handler</a> from cm0dsasm.o(.text) referenced from cm0dsasm.o(RESET)
 <LI><a href="#[18]">__main</a> from __main.o(!!!main) referenced from cm0dsasm.o(.text)
 <LI><a href="#[14]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[16]">cb_endFrame</a> from 01bsp_radio.o(i.cb_endFrame) referenced from 01bsp_radio.o(i.mote_main)
 <LI><a href="#[15]">cb_startFrame</a> from 01bsp_radio.o(i.cb_startFrame) referenced from 01bsp_radio.o(i.mote_main)
 <LI><a href="#[13]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[18]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1c]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[a7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3d]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[21]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[26]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[af]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[c0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[c3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[c4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[23]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[27]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; mote_main &rArr; board_init &rArr; initialize_mote &rArr; radio_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[17]"></a>Reset_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cm0dsasm.o(.text))

<P><STRONG><a name="[6]"></a>UART_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Handler &rArr; uart_rx_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>ADC_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ADC_Handler &rArr; adc_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RF_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF_Handler &rArr; radio_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RFTIMER_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFTIMER_Handler &rArr; sctimer_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>EXT_GPIO3_ACTIVEHIGH_DEBOUNCED_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = EXT_GPIO3_ACTIVEHIGH_DEBOUNCED_Handler &rArr; ext_gpio3_activehigh_debounced_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio3_activehigh_debounced_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXT_GPIO8_ACTIVEHIGH_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = EXT_GPIO8_ACTIVEHIGH_Handler &rArr; ext_gpio8_activehigh_isr &rArr; optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio8_activehigh_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXT_GPIO9_ACTIVELOW_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = EXT_GPIO9_ACTIVELOW_Handler &rArr; ext_gpio9_activelow_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio9_activelow_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXT_GPIO10_ACTIVELOW</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = EXT_GPIO10_ACTIVELOW &rArr; ext_gpio10_activelow_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio10_activelow_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RAWCHIPS_STARTVAL_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RAWCHIPS_STARTVAL_Handler &rArr; rawchips_startval_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawchips_startval_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RAWCHIPS_32_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = RAWCHIPS_32_Handler &rArr; rawchips_32_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawchips_32_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EXT_OPTICAL_IRQ_IN_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_32_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>OPTICAL_SFD_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cm0dsasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = OPTICAL_SFD_Handler &rArr; optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm0dsasm.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cm0dsasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ca]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawchips_32_isr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio9_activelow_isr
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio3_activehigh_debounced_isr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio10_activelow_isr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_isr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3c]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[20]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[22]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[cb]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eui64_get
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
</UL>

<P><STRONG><a name="[cc]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[44]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame
</UL>

<P><STRONG><a name="[cd]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_init
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
</UL>

<P><STRONG><a name="[d2]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3b]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[40]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4a]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[24]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[29]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d7]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>GPI_control</STRONG> (Thumb, 182 bytes, Stack size 36 bytes, scm3c_hw_interface.o(i.GPI_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPI_control &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[52]"></a>GPI_enables</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, scm3c_hw_interface.o(i.GPI_enables))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPI_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[53]"></a>GPO_control</STRONG> (Thumb, 170 bytes, Stack size 36 bytes, scm3c_hw_interface.o(i.GPO_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPO_control &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[54]"></a>GPO_enables</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, scm3c_hw_interface.o(i.GPO_enables))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPO_enables &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[55]"></a>LC_FREQCHANGE</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, scm3c_hw_interface.o(i.LC_FREQCHANGE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flipChar
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyTX
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyRX
</UL>

<P><STRONG><a name="[57]"></a>LC_monotonic</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, scm3c_hw_interface.o(i.LC_monotonic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LC_monotonic &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_FREQCHANGE
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[2d]"></a>_sys_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _sys_exit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2f]"></a>adc_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, adc.o(i.adc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = adc_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>

<P><STRONG><a name="[76]"></a>analog_scan_chain_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.analog_scan_chain_load))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[75]"></a>analog_scan_chain_write</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.analog_scan_chain_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = analog_scan_chain_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[59]"></a>board_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, board.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = board_init &rArr; initialize_mote &rArr; radio_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_getCalibrationFinshed
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_enable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eui64_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32c
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>

<P><STRONG><a name="[7c]"></a>board_sleep</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.board_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>

<P><STRONG><a name="[16]"></a>cb_endFrame</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, 01bsp_radio.o(i.cb_endFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cb_endFrame &rArr; radio_getReceivedFrame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxNow
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_sync_off
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_debug_toggle
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 01bsp_radio.o(i.mote_main)
</UL>
<P><STRONG><a name="[15]"></a>cb_startFrame</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, 01bsp_radio.o(i.cb_startFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cb_startFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_sync_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 01bsp_radio.o(i.mote_main)
</UL>
<P><STRONG><a name="[51]"></a>clear_asc_bit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.clear_asc_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_stg3gm_ASC
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_gain_ASC
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_Q
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_I
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_LDO_voltage
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ldo_control
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_control
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_control
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clk_secondary_freq
</UL>

<P><STRONG><a name="[5b]"></a>crc32c</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, scm3c_hw_interface.o(i.crc32c))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = crc32c
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[5c]"></a>debugpins_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_init))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[9e]"></a>debugpins_isr_clr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_isr_clr))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_isr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>

<P><STRONG><a name="[9c]"></a>debugpins_isr_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_isr_set))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_isr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>

<P><STRONG><a name="[a0]"></a>debugpins_radio_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debugpins.o(i.debugpins_radio_set))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
</UL>

<P><STRONG><a name="[93]"></a>divProgram</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.divProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = divProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
</UL>

<P><STRONG><a name="[61]"></a>eui64_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eui64.o(i.eui64_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eui64_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[35]"></a>ext_gpio10_activelow_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, debugpins.o(i.ext_gpio10_activelow_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ext_gpio10_activelow_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO10_ACTIVELOW
</UL>

<P><STRONG><a name="[32]"></a>ext_gpio3_activehigh_debounced_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, debugpins.o(i.ext_gpio3_activehigh_debounced_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ext_gpio3_activehigh_debounced_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO3_ACTIVEHIGH_DEBOUNCED_Handler
</UL>

<P><STRONG><a name="[33]"></a>ext_gpio8_activehigh_isr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, debugpins.o(i.ext_gpio8_activehigh_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ext_gpio8_activehigh_isr &rArr; optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO8_ACTIVEHIGH_Handler
</UL>

<P><STRONG><a name="[34]"></a>ext_gpio9_activelow_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, debugpins.o(i.ext_gpio9_activelow_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ext_gpio9_activelow_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO9_ACTIVELOW_Handler
</UL>

<P><STRONG><a name="[4b]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[56]"></a>flipChar</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.flipChar))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_FREQCHANGE
</UL>

<P><STRONG><a name="[a4]"></a>flip_lsb8</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.flip_lsb8))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_2M_RC_frequency
</UL>

<P><STRONG><a name="[13]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>init_ldo_control</STRONG> (Thumb, 142 bytes, Stack size 4 bytes, scm3c_hw_interface.o(i.init_ldo_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_ldo_control &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[5a]"></a>initialize_mote</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.initialize_mote))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = initialize_mote &rArr; radio_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ldo_control
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_control
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_control
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clk_secondary_freq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_2M_RC_frequency
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_write
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_load
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[66]"></a>leds_debug_toggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, leds.o(i.leds_debug_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame
</UL>

<P><STRONG><a name="[7e]"></a>leds_error_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, leds.o(i.leds_error_off))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>

<P><STRONG><a name="[7d]"></a>leds_error_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, leds.o(i.leds_error_on))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>

<P><STRONG><a name="[5d]"></a>leds_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, leds.o(i.leds_init))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[a1]"></a>leds_radio_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, leds.o(i.leds_radio_on))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
</UL>

<P><STRONG><a name="[68]"></a>leds_sync_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, leds.o(i.leds_sync_off))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame
</UL>

<P><STRONG><a name="[69]"></a>leds_sync_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, leds.o(i.leds_sync_on))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_startFrame
</UL>

<P><STRONG><a name="[28]"></a>main</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; mote_main &rArr; board_init &rArr; initialize_mote &rArr; radio_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[77]"></a>mote_main</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, 01bsp_radio.o(i.mote_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mote_main &rArr; board_init &rArr; initialize_mote &rArr; radio_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setStartFrameCb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setFrequency
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setEndFrameCb
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxNow
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rxEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rfOn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_error_on
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_error_off
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_sleep
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>optical_32_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, optical.o(i.optical_32_isr))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_OPTICAL_IRQ_IN_Handler
</UL>

<P><STRONG><a name="[63]"></a>optical_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, optical.o(i.optical_enable))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[64]"></a>optical_getCalibrationFinshed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, optical.o(i.optical_getCalibrationFinshed))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[6e]"></a>optical_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, optical.o(i.optical_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = optical_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[39]"></a>optical_sfd_isr</STRONG> (Thumb, 582 bytes, Stack size 96 bytes, optical.o(i.optical_sfd_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = optical_sfd_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_IF_fine
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_IF_coarse
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_IF_fine
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_IF_coarse
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_monotonic
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clk_secondary_freq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_2M_RC_frequency
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_RC2M_superfine
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_RC2M_fine
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_RC2M_coarse
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_HF_CLOCK_fine
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_set_HF_CLOCK_coarse
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_RC2M_superfine
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_RC2M_fine
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_RC2M_coarse
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_IF_clk_target
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_HF_CLOCK_fine
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm3c_hw_interface_get_HF_CLOCK_coarse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_write
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_scan_chain_load
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_gpio8_activehigh_isr
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPTICAL_SFD_Handler
</UL>

<P><STRONG><a name="[92]"></a>prescaler</STRONG> (Thumb, 454 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
</UL>

<P><STRONG><a name="[65]"></a>radio_getReceivedFrame</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, radio.o(i.radio_getReceivedFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = radio_getReceivedFrame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_RSSI
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LQI
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame
</UL>

<P><STRONG><a name="[60]"></a>radio_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, radio.o(i.radio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = radio_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[74]"></a>radio_init_divider</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.radio_init_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = radio_init_divider &rArr; divProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_DIV_supply
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prescaler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[70]"></a>radio_init_rx_MF</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, scm3c_hw_interface.o(i.radio_init_rx_MF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = radio_init_rx_MF &rArr; set_IF_stg3gm_ASC &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_stg3gm_ASC
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_gain_ASC
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_Q
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_I
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_LDO_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[71]"></a>radio_init_tx</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, scm3c_hw_interface.o(i.radio_init_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = radio_init_tx &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PA_supply
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LO_supply
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LC_current
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[30]"></a>radio_isr</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, radio.o(i.radio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = radio_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sctimer_readCounter
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_IF_estimate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_isr_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_isr_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Handler
</UL>

<P><STRONG><a name="[7a]"></a>radio_rfOn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, radio.o(i.radio_rfOn))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>

<P><STRONG><a name="[62]"></a>radio_rxEnable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, radio.o(i.radio_rxEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = radio_rxEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_radio_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_radio_on
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame
</UL>

<P><STRONG><a name="[67]"></a>radio_rxNow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, radio.o(i.radio_rxNow))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_endFrame
</UL>

<P><STRONG><a name="[79]"></a>radio_setEndFrameCb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio.o(i.radio_setEndFrameCb))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>

<P><STRONG><a name="[7b]"></a>radio_setFrequency</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, radio.o(i.radio_setFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = radio_setFrequency &rArr; setFrequencyTX &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyTX
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFrequencyRX
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>

<P><STRONG><a name="[78]"></a>radio_setStartFrameCb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio.o(i.radio_setStartFrameCb))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mote_main
</UL>

<P><STRONG><a name="[37]"></a>rawchips_32_isr</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, radio.o(i.rawchips_32_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = rawchips_32_isr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAWCHIPS_32_Handler
</UL>

<P><STRONG><a name="[36]"></a>rawchips_startval_isr</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, radio.o(i.rawchips_startval_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rawchips_startval_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAWCHIPS_STARTVAL_Handler
</UL>

<P><STRONG><a name="[9f]"></a>read_IF_estimate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.read_IF_estimate))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>

<P><STRONG><a name="[90]"></a>read_LQI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.read_LQI))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
</UL>

<P><STRONG><a name="[8f]"></a>read_RSSI</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.read_RSSI))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_getReceivedFrame
</UL>

<P><STRONG><a name="[6a]"></a>reverse</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.reverse))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32c
</UL>

<P><STRONG><a name="[81]"></a>scm3c_hw_interface_get_HF_CLOCK_coarse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_HF_CLOCK_coarse))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[80]"></a>scm3c_hw_interface_get_HF_CLOCK_fine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_HF_CLOCK_fine))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[85]"></a>scm3c_hw_interface_get_IF_clk_target</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_IF_clk_target))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[86]"></a>scm3c_hw_interface_get_IF_coarse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_IF_coarse))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[87]"></a>scm3c_hw_interface_get_IF_fine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_IF_fine))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[82]"></a>scm3c_hw_interface_get_RC2M_coarse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_RC2M_coarse))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[83]"></a>scm3c_hw_interface_get_RC2M_fine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_RC2M_fine))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[84]"></a>scm3c_hw_interface_get_RC2M_superfine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_get_RC2M_superfine))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[6d]"></a>scm3c_hw_interface_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scm3c_hw_interface_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
</UL>

<P><STRONG><a name="[88]"></a>scm3c_hw_interface_set_HF_CLOCK_coarse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_HF_CLOCK_coarse))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[89]"></a>scm3c_hw_interface_set_HF_CLOCK_fine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_HF_CLOCK_fine))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[8d]"></a>scm3c_hw_interface_set_IF_coarse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_IF_coarse))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[8e]"></a>scm3c_hw_interface_set_IF_fine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_IF_fine))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[8a]"></a>scm3c_hw_interface_set_RC2M_coarse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_RC2M_coarse))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[8b]"></a>scm3c_hw_interface_set_RC2M_fine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_RC2M_fine))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[8c]"></a>scm3c_hw_interface_set_RC2M_superfine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.scm3c_hw_interface_set_RC2M_superfine))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[5f]"></a>sctimer_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sctimer.o(i.sctimer_init))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[31]"></a>sctimer_isr</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, sctimer.o(i.sctimer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sctimer_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_isr_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugpins_isr_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTIMER_Handler
</UL>

<P><STRONG><a name="[9d]"></a>sctimer_readCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sctimer.o(i.sctimer_readCounter))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_isr
</UL>

<P><STRONG><a name="[a3]"></a>setFrequencyRX</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, radio.o(i.setFrequencyRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setFrequencyRX &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_FREQCHANGE
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setFrequency
</UL>

<P><STRONG><a name="[a2]"></a>setFrequencyTX</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, radio.o(i.setFrequencyTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setFrequencyTX &rArr; LC_FREQCHANGE
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_FREQCHANGE
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_setFrequency
</UL>

<P><STRONG><a name="[73]"></a>set_2M_RC_frequency</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, scm3c_hw_interface.o(i.set_2M_RC_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_2M_RC_frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flip_lsb8
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[91]"></a>set_DIV_supply</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.set_DIV_supply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_DIV_supply
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
</UL>

<P><STRONG><a name="[98]"></a>set_IF_LDO_voltage</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, scm3c_hw_interface.o(i.set_IF_LDO_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_IF_LDO_voltage &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[72]"></a>set_IF_clock_frequency</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, scm3c_hw_interface.o(i.set_IF_clock_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_IF_clock_frequency &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[96]"></a>set_IF_comparator_trim_I</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.set_IF_comparator_trim_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_IF_comparator_trim_I &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[97]"></a>set_IF_comparator_trim_Q</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.set_IF_comparator_trim_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_IF_comparator_trim_Q &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[94]"></a>set_IF_gain_ASC</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.set_IF_gain_ASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_IF_gain_ASC &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[95]"></a>set_IF_stg3gm_ASC</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.set_IF_stg3gm_ASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_IF_stg3gm_ASC &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
</UL>

<P><STRONG><a name="[99]"></a>set_LC_current</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.set_LC_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_LC_current
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
</UL>

<P><STRONG><a name="[9b]"></a>set_LO_supply</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.set_LO_supply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_LO_supply
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
</UL>

<P><STRONG><a name="[9a]"></a>set_PA_supply</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, scm3c_hw_interface.o(i.set_PA_supply))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
</UL>

<P><STRONG><a name="[50]"></a>set_asc_bit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, scm3c_hw_interface.o(i.set_asc_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_clock_frequency
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_stg3gm_ASC
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_gain_ASC
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_Q
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_comparator_trim_I
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IF_LDO_voltage
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_tx
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_rx_MF
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init_divider
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ldo_control
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_enables
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPO_control
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_enables
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPI_control
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clk_secondary_freq
</UL>

<P><STRONG><a name="[6f]"></a>set_sys_clk_secondary_freq</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, scm3c_hw_interface.o(i.set_sys_clk_secondary_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_sys_clk_secondary_freq &rArr; set_asc_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_asc_bit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_asc_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_mote
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optical_sfd_isr
</UL>

<P><STRONG><a name="[5e]"></a>uart_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.uart_init))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[6b]"></a>uart_out</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.uart_out))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2e]"></a>uart_rx_isr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(i.uart_rx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_rx_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[49]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[48]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[3e]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3f]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
